*board.txt*  vim-board
                                                                             ~
                                                                             ~
      _    _ _____ _______     ______   _____  _______  ______ ______        ~
       \  /    |   |  |  | ___ |_____] |     | |_____| |_____/ |     \       ~
        \/   __|__ |  |  |     |_____] |_____| |     | |    \_ |_____/       ~
                                                                             ~
                                                                             ~
                      Azabiong <azabiongc@gmail.com>                         ~
                              License: MIT                                   ~
                                                                             ~
------------------------------------------------------------------------------
CONTENTS                                                            *Vim-Board*
                                                                    `ver 1.10.6`
                  Introduction          |Board-Introduction|
                  Configuration         |Board-Configuration|
                  Menu                  |Board-Menu|
                  Syntax                |Board-Syntax|
                  Customizing Colors    |Board-Customizing-Colors|
                  Commands              |Board-Commands|
                  Options               |Board-Options|
                  Log                   |Board-Log|


------------------------------------------------------------------------------
INTRODUCTION                                                *Board-Introduction*

This plugin introduces a file type `board` where you can easily write notes, and
define shortcuts to directories, files, and various commands.

Feature 1~

 After assigning a '`Key`' to the plugin, you can take quick notes on the board
 at any time while editing using:
>
      Key Enter
<
 and to return:
>
      Key Esc
<
Feature 2~

 You can easily define shortcuts to directories, files, and commands on the board
 using simple `key-value` pairs. For example:
>
      dt  ~/Documents/Terms/
      v   ~/.vimrc
<
 Immediately after saving, you can use the following key sequences to change the
 current working directory, and open the file:
>
      Key dt
      Key v
<
------------------------------------------------------------------------------
CONFIGURATION                                              *Board-Configuration*

The first step is to define a directory to store the `board` files. The plugin
default path is:
>
    let BoardPath = '~/.vim/after/vim-board'
<
The next step is to assign a convenient key to bring up the `menu` with the `board`.
The plugin default shortcut is `a single quote and space` if available.
>
    nmap '<Space> <Plug>(BoardMenu)
<
Now, save the changes and reload the configuration.
>
 At this point, you can try out the features in the introduction section above.
<
------------------------------------------------------------------------------
MENU                                                                *Board-Menu*

Pressing the `BoardMenu` key will bring up the auto-expanding menu with the most
recently used `board`.
>
    Board (-)prev(=)main(+)new(;)return  _
<
You can enter the key you have defined on the `board`, or switch between boards
using the following keys:

        <Enter>   edit current board
         <Esc>    return
           ;      return
        <Space>   scroll down
         <Down>   scroll down
          <Up>    scroll up
       <C-Space>  scroll up
           -      switch to previous board
           =      switch to main board
           +      add new board
           .      link current board
           :      command-line mode

For manually opened boards, you can use `(.)link` menu with the `.` key to activate
links defined on the board.

------------------------------------------------------------------------------
BOARD SYNTAX                                                      *Board-Syntax*

The `board` file syntax is simple. You can use indentation and some leading
characters to mark each item differently.

Section ~

 The plugin uses sections to categorize content. Each section starts at the
 beginning of a line, and can have different syntax depending on its type.
>
  Section
      Group
          TEXT
<
:Links section ~

 The plugin loads the shortcut links defined in this section. The following
 example defines two links:
>
        /p  ~/Languages/Python/
        pn  ~/Languages/Python/notes.py
<
 Each link is a simple space-separated `key-value` pair, and uses the same
 indentation as the `TEXT` field starting at column 6 or higher.

 Commands ~
    You can also add additional commands using `|` bar. For example, to update
    the `NERDTree` list after changing the current working directory: >

        /p  ~/Languages/Python/ | NERDTreeCWD
<
    After opening the file, to scroll line 128 to the top:
>
        pn  ~/Languages/Python/notes.py | 128 | normal! zt
<
    Or, you can combine commands to open specific files after changing the directory:
>
        d1  ~/Directory/ | NERDTreeCWD | wincmd p | edit README.md
<
 Key ~
    A key can consist of any combination of symbols, alphanumeric, and Unicode
    characters except those that start with some predefined characters.

    Available leading characters:~
      ~!@$%^_()[]{}<>'"/?,0-9a-zA-Z and Unicode characters

    Used in the syntax      Used in the menu~
        #  comment             ;  return
        :  setting             -  previous
        |  command             =  main
        *` special             +  new
        -  plain text          .  load
        &  reference           :  command

    You can also define the same key differently on each board.

    Tip ~
    When you suddenly have multiple to-do lists, numbering can be useful.
>
        t1  ~/Todo/file1 | /item | echo 'find item'
        t2  ~/Todo/dir2/ | echo 'add file2'
<
    Long key ~
    You only need to enter the unique prefix part of the key. For example, if
    you define a long key `xylophone` and don't have a key that starts with `xy`,
    you can open the link with `xy` <Enter>.

 Path ~
    To easily define a link to a file, the plugin supports copying the current
    file's path to a register when the `menu` key is pressed (by default the `b`
    register).

    To paste the path stored in register 'b' in insert mode:
>
        CTRL-R b
<
    When switching to another board stored in the |BoardPath| directory, you can
    omit the path and specify only the file name. The links defined on the board
    are automatically loaded when you switch boards using the key.
>
        'a  another.board
<
 Multi-line commands ~
    Multi-line commands can be set using the leading bar `|` character.
>
        m   ~/directory/or_file
            | echo 'foo'
            | echo 'bar'
<
 Commands only ~
    You can also define just a list of commands.

    For example, to copy a frequently used string or command to the clipboard:
>
        c1  | let @+ = "copy this string to the clipboard"
<
    To define a set of temporary key-maps:
>
        k1  | nn f0 <Cmd>echo 0<CR>
            | nn f9 <Cmd>echo 9<CR>
<
    To define some input from the shell tool:
>
        s1  | Board* | r! echo "This is the scratchpad on the Board"
        s2  | Board* | r! curl -sI example.com
<
 Command-line mode ~
    When using the `|` bar character as a shell `pipe` or other meaning, you can
    switch to command-line mode input by adding a colon `:` after the bar.
>
        p1  | Board* |: r! ls | wc
        p2  | Board* |: r! cat ~/.ssh/known_hosts | awk '$1 ~ /[0-9]/ { print $1; exit}'
<
 Link reference ~
    You can use the `&` symbol to run other links, for example:
>
        Nw  | NERDTreeCWD | wincmd p
        d1  ~/Directory/  | &Nw
<
 Stop command ~
    To stop a long list of commands while processing, press the `menu` key and
    input CTRL-C or an undefined key.

------------------------------------------------------------------------------
CUSTOMIZING COLORS                                    *Board-Customizing-Colors*

The plugin provides two default color sets and automatically loads one depending
on the current 'background' mode. You can use the Vim |:hi| command to customize
colors starting with `Board`, and save them to the configuration file or color
scheme.
>
  BoardHelp  BoardSection  BoardGroup  BoardMarker  BoardSpecial  BoardNote
  BoardLed...
<
 Example ~
>
    :hi BoardEqual ctermfg=183 guifg=#e0acf8
<
------------------------------------------------------------------------------
COMMANDS                                                        *Board-Commands*
                                                                         *Board*
Board ~
    Print the plugin version

Board* ~
    Open the scratchpad. This can be useful when combined with shell commands.
                                                                   *Board:start*
Board start ~
    Start running another link.
>
        C   | echo 'a list of commands'
        s   | if getcwd() =~ '/name' | Board start &C | endif
<                                                                   *Board:stop*
Board stop ~
    Stop running the current link.
>
        0   | lua if 0 then vim.cmd('Board stop') end | echo 'no output'
<                                                                   *Board:menu*
Board menu ~
    Bring up the |Board-Menu|

                                                                   *BoardTermCd*
<Plug>(BoardTermCd) ~
    When using terminal window, synchronize current working directory with Vim
    by running `cd` command. To map key `Ctrl`+`\\` for terminal window:
>
      tmap <C-\><C-\>  <Plug>(BoardTermCd)
<
    nvim .lua
>
      vim.api.nvim_set_keymap('t', '<C-\\><C-\\>', '<Plug>(BoardTermCd)', {})
<
                                                                   *Board:speed*
Board speed ~
    Set the command processing rate in proportion to `Hz` while running the
    current link, and restores the default value after processing.

    Default: 1000
    Values:  1 ~ 1000  or  max

    Example: >
        run | echo ' Board:speed'
            | Board speed 1
            | echo ' Ready.' | echo ' Ready..' | echo ' Ready...'
            | echo ' Set.'   | echo ' Set..'
            | Board speed 8
            | echo ' Go!'
            | echo ' One'
            | echo ' Two'
            | echo ' Three'
            | echo ' Four'
            | echo ' Five'
            | echo ' Six'
            | echo ' Seven'
            | echo ' Eight'
            | echo ' Nine'
            | echo ' Done!'
<
------------------------------------------------------------------------------
OPTIONS                                                          *Board-Options*
                                                                     *BoardPath*
|BoardPath| specifies the directory where the `board` files will be stored.
    The plugin default path is:
>
        let BoardPath = '~/.vim/after/vim-board'
<
    The plugin loads `_main_.board` when started.
                                                                 *BoardRegister*
|BoardRegister| specifies the register to copy the path to the current file when
    the `menu` key is pressed. The plugin uses the 'b' register by default.
>
        let BoardRegister = 'b'
<
    Values: 'a' ~ 'z'  or  '' `(disable)`

    For example, to paste the path stored in register 'b' in insert mode:
>
        CTRL-R b
<                                                               *BoardMenuExpand*
|BoardMenuExpand| option specifies the wait time in milliseconds before expanding
    the menu.
>
        let BoardMenuExpand = 360
<
    Default: 360 `(ms)`
    Values:  180 ~ 540

------------------------------------------------------------------------------
ISSUES                                                            *Board-Issues*

If you have any issues that need fixing, comments or new features you would
like to add, please feel free to open an issue.

------------------------------------------------------------------------------
LOG                                                                  *Board-Log*

1.10~
    Add command |Board:menu| to bring up the menu from link
    Add option |BoardMenuExpand| to adjust menu expansion time
    Add syntax ':' type
1.09~
    Add auto-expand menu
    Improve buffer switching
1.08~
    Add 'auto hold' mode on `Menu <Enter>`
    Improve command line mode input
    Tune command interval
1.06~
    Add sync terminal current working directory
      :h  BoardTermCd
    Improve scratchpad logging, basic boards
1.03~
    Add command-line mode switch `|:` to use shell pipe
      c   | Board* |: r! ls | wc
1.02~
    Add command to open the scratchpad
      :Board*

------------------------------------------------------------------------------
Vim:ft=help:tw=80:ts=4:et:nowrap:norl
